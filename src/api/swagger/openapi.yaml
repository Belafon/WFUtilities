openapi: 3.1.0
info:
  title: WorldsFactory API
  version: 1.0.0
  description: API for WorldsFactory VS Code Extension
servers:
  - url: http://localhost:3149
    description: Development server

components:
  schemas:
    TimeRange:
      type: object
      required:
        - start
        - end
      properties:
        start:
          type: string
          description: Date and time in format 'D.M. H:mm'
          example: '2.1. 8:00'
          pattern: '^\d{1,2}\.\d{1,2}\.\s\d{1,2}:\d{2}$'
        end:
          type: string
          description: Date and time in format 'D.M. H:mm'
          example: '5.1. 8:00'
          pattern: '^\d{1,2}\.\d{1,2}\.\s\d{1,2}:\d{2}$'

    EventUpdateRequest:
      type: object
      required:
        - title
        - description
        - location
        - timeRange
      properties:
        title:
          type: string
        description:
          type: string
        location:
          type: string
        timeRange:
          $ref: '#/components/schemas/TimeRange'

    SetTimeRequest:
      type: object
      required:
        - timeRange
      properties:
        timeRange:
          $ref: '#/components/schemas/TimeRange'

    TLinkCostItem:
      type: object
      required:
        - id
        - amount
      properties:
        id:
          type: string
          description: TItemId
        amount:
          type: number

    TLinkCostObjectUpdateRequest:
      type: object
      properties:
        time:
          type: object
          properties:
            value:
              type: number
              description: Duration value (e.g., minutes)
            unit:
              type: string
              enum: [min, hour, day]
              description: Unit of time
        items:
          type: array
          items:
            $ref: '#/components/schemas/TLinkCostItem'
        tools:
          type: array
          items:
            type: string

    TLinkCostUpdateRequest:
      oneOf:
        - type: object
          properties:
            value:
              type: number
              description: Duration value (e.g., minutes)
            unit:
              type: string
              enum: [min, hour, day]
              description: Unit of time for DeltaTime
          required:
            - value
            - unit
          description: Represents a simple time cost (DeltaTime).
        - $ref: '#/components/schemas/TLinkCostObjectUpdateRequest'

    TLinkUpdateRequest:
      type: object
      properties:
        text:
          type: string
        passageId:
          type: string
        autoPriority:
          type: number
        cost:
          $ref: '#/components/schemas/TLinkCostUpdateRequest'

    TPassageScreenBodyItemUpdateRequest:
      type: object
      properties:
        condition:
          type: boolean
          description: Condition for this body part (complex to update directly).
        redirect:
          type: string
        text:
          type: string
        links:
          type: array
          items:
            $ref: '#/components/schemas/TLinkUpdateRequest'

    PassageUpdateRequest:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum: ['screen', 'linear', 'transition']
          description: The type of the passage being updated. This helps interpret other fields.
        title:
          type: string
          description: New title for the screen passage (often an i18n key).
        image:
          type: string
          description: New image path for the screen passage.
        body:
          type: array
          items:
            $ref: '#/components/schemas/TPassageScreenBodyItemUpdateRequest'
          description: Full new body for the screen passage (complex update).
        description:
          type: string
          description: New description for a linear passage.
        nextPassageId:
          type: string
          description: New nextPassageId for a transition or linear passage.

    SuccessResponse:
      type: object
      properties:
        success: 
          type: boolean
        message:
          type: string
      required:
        - success

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
        error:
          type: string
      required:
        - success
        - error

    # Map related schemas
    MapTileData:
      type: object
      required:
        - tile
      properties:
        tile:
          type: string
          description: Identifier for the tile graphic or type.
        title:
          type: string
          nullable: true
          description: Optional title or label for this specific tile instance.

    MapLocationReference:
      type: object
      required:
        - i
        - j
        - locationId
      properties:
        i:
          type: integer
          format: int32
          description: Row index (y-coordinate) of the location on the map.
        j:
          type: integer
          format: int32
          description: Column index (x-coordinate) of the location on the map.
        locationId:
          type: string
          description: ID of the location.

    MapMapReference:
      type: object
      required:
        - i
        - j
        - mapId
      properties:
        i:
          type: integer
          format: int32
          description: Row index (y-coordinate) of the map link on the map.
        j:
          type: integer
          format: int32
          description: Column index (x-coordinate) of the map link on the map.
        mapId:
          type: string
          description: ID of the map to link to.
          
    MapData:
      type: object
      required:
        - title
        - width
        - height
        - data
        - locations
        - maps
      properties:
        title:
          type: string
        width:
          type: integer
          format: int32
        height:
          type: integer
          format: int32
        data:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/MapTileData'
        locations:
          type: array
          items:
            $ref: '#/components/schemas/MapLocationReference'
        maps:
          type: array
          items:
            $ref: '#/components/schemas/MapMapReference'
            
    MapUpdateRequest: 
      $ref: '#/components/schemas/MapData'
      
    MapResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          $ref: '#/components/schemas/MapData'
      required:
        - success
        - data

    MapListResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: array
          items:
            type: string # Array of map IDs
          description: A list of map identifiers.
      required:
        - success
        - data

  responses:
    Success:
      description: Operation successful
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessResponse'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

paths:
  /event/{eventId}:
    put:
      summary: Update event details
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventUpdateRequest'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete an event
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '404':
          $ref: '#/components/responses/NotFound'

  /event/{eventId}/open:
    post:
      summary: Open an event in VS Code
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '404':
          $ref: '#/components/responses/NotFound'

  /event/{eventId}/setTime:
    post:
      summary: Set event time range
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetTimeRequest'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '404':
          $ref: '#/components/responses/NotFound'

  /passage/screen/{passageId}:
    put:
      summary: Update screen passage details
      parameters:
        - name: passageId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PassageUpdateRequest'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete a screen passage
      parameters:
        - name: passageId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '404':
          $ref: '#/components/responses/NotFound'

  /passage/screen/{passageId}/open:
    post:
      summary: Open a screen passage file in VS Code
      parameters:
        - name: passageId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '404':
          $ref: '#/components/responses/NotFound'

  /passage/screen/{passageId}/setTime:
    post:
      summary: Set time for a screen passage
      parameters:
        - name: passageId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetTimeRequest'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '404':
          $ref: '#/components/responses/NotFound'
          
  # Map API Endpoints
  /map/{mapId}:
    put:
      summary: Update or create map data
      tags:
        - Map
      parameters:
        - name: mapId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the map.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MapUpdateRequest'
      responses:
        '200':
          $ref: '#/components/responses/Success' 
        '400':
          description: Bad request due to invalid input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      summary: Get map data by ID
      tags:
        - Map
      parameters:
        - name: mapId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the map.
      responses:
        '200':
          description: Map data retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MapResponse'
        '400': 
          description: Bad request due to invalid input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Map not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /map: 
    get:
      summary: List all available map IDs
      tags:
        - Map
      responses:
        '200':
          description: List of map IDs retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MapListResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'